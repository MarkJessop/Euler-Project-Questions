package questions;


public class Euler_1_to_5 {
	
	/* Project Euler ~ Question 1
	*  http://projecteuler.net/problem=1
	*  If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
	*
	*  Find the sum of all the multiples of 3 or 5 below 1000.
	*/
	public int getEuler1Answer(){
		int num;
		int sum = 0;
		for  (num=1; num <1000; num++){
			if (num%3 == 0 || num %5 == 0)
				sum += num;
		}
		return sum;
	}
	
	/*	Euler problem 2
	*	URL: http://projecteuler.net/problem=2
	*
	*	Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
	*
	*	1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
	*
	*	By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
	*/
	public int getEuler2Answer(){
		int num1 = 1;
		int num2 = 2;
		int sum = 0;
		int nextNum;
		
		//	Intializes sum if num1 is an even number
		if (num1 % 2 == 0)
			sum = num1;
		
		//	Loops until the value of the next term of the fibonacci sequence is greater then 4 million
		do {
			
			//	Checks if value is even
			if (num2 % 2 == 0)
				sum += num2;
			
			//	Finds next term in the sequence
			nextNum = num1 + num2;
			
			//	Shifts the sequence to the left
			num1 = num2;
			num2 = nextNum;
		} while (nextNum < 4000000);	
		
		return sum;
	}
	
	/*	Euler problem 3
	*	URL: http://projecteuler.net/problem=3
	*
	*	The prime factors of 13195 are 5, 7, 13 and 29.
	*
	*	What is the largest prime factor of the number 600851475143 ?
	*/




	public int getEuler3Answer() {
		long factorNum = 600851475143L;	//	Number to find the largest prime factor of
		int index = 2;
		
		while (factorNum > index){
			if (factorNum % index == 0)	{
				factorNum = factorNum / index;
				
			}
			else
				index++;
			
		}
		return index;
	}
	
	/*	Problem 4
	*	http://projecteuler.net/problem=4
	*
	*	A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 99.
	*	
	*	Find the largest palindrome made from the product of two 3-digit numbers.
	*
	*/
	public int getEuler4Answer()	{
		int num1 = 100;
		int num2 = 100;
		int tempNum; //	used to check for palindrome
		int digit;	
		int product = 0;
		int reverse = 0;
		int found = 0;
		
		while (num1 <= 999) {
			while (num2 <= 999) {
				
				//	Reverse Number if tempNum is divisible by 11
				product = num1 * num2;
				tempNum = product;
				if (tempNum % 11 == 0)	{
					while (tempNum > 0)	{
						digit = tempNum % 10;
						reverse = reverse*10 + digit;
						tempNum = tempNum / 10;
				
					}
					//	Check for palindrome
					if (product == reverse && product != 0)	{
						if (found < product)
							found = product;
					}
				}	
				
				
				num2++;
				reverse = 0;
			}
			num1++;
			num2= 100;
		}
		
		return found;
		
	}
	
	/*	Problem 5
	*	http://projecteuler.net/problem=5
	*
	*	2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
	*
	*	What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?
	*
	*	Pseudocode
	*		x at 20
	*			loop through 1-20
	*				x mod loop number = 0
	*				return x
	*			End loop
	*			If not found add 20
	*
	*/
	public int getEuler5Answer()	{
		int num1 = 0;
		boolean found = false;
		int index = 3;	//	does not need to start at 1 or 2 because every multiple of 20 is divisible by those numbers
		
		
		while (found == false) {
			num1 += 20;
			while (num1 % index == 0 && index <=20)	{
				if (index == 20)
					found = true;
				index++;
			}
			index = 3;
		}
		return num1;
	}
}
